<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
// Creates groups and enum from default configuration
namespace VSI.EDGEAXConnector.Configuration
{
	internal enum GROUP
	{ 
<#		Dictionary<string, List<string>> settings = GetSettings();
		int groupCount = settings.Count;
		int count = 0;
		foreach (String groupName in settings.Keys)
		{ 	string comma = ",";
			count++; 
			if (count == groupCount) comma = "";
#>
		<#= groupName + comma #>
<#
		}
#>
	}
<#
	foreach(KeyValuePair<string, List<string>> entry in settings)
	{
#>
	public enum <#= entry.Key #>
	{
<#	count=0;
	int vCount = entry.Value.Count;
	foreach(string v in entry.Value)
	{
		string comma = ",";
		count++;
		if (count == vCount) comma = "";
#>
		<#= v + comma #>
<#
	}
#>
	}

<#
}
#>
	public enum CATEGORYASSIGNMENT
	{
		NONE,
		ALL,
		SINGLE
	}
}
<#+
	public Dictionary<string, List<string>> GetSettings()
	{
		var result = new Dictionary<string, List<string>>(); 
		XmlDocument doc = new XmlDocument();
		string absolutePath = Host.ResolvePath("Default.config.xml");                
		doc.Load(absolutePath);
		XmlNodeList groupList = doc.GetElementsByTagName("SettingGroup");
		for (int i = 0; i < groupList.Count; i++) 
		{   
			List<string> vals = new List<string>();
			foreach (XmlNode node in groupList[i].ChildNodes)
			{
				vals.Add(node["Key"].InnerText);
			}
			result.Add(groupList[i].Attributes["Name"].Value, vals);
		}
		return result;
	}
#>