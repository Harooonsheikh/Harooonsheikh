//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VSI.EDGEAXConnector.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IntegrationDBEntities : DbContext
    {
        public IntegrationDBEntities()
            : base("name=IntegrationDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApplicationSetting> ApplicationSetting { get; set; }
        public virtual DbSet<ConfigurableObject> ConfigurableObject { get; set; }
        public virtual DbSet<DeliveryMethod> DeliveryMethod { get; set; }
        public virtual DbSet<DimensionSet> DimensionSet { get; set; }
        public virtual DbSet<EcomType> EcomType { get; set; }
        public virtual DbSet<EmailSubscriber> EmailSubscriber { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplate { get; set; }
        public virtual DbSet<Entity> Entity { get; set; }
        public virtual DbSet<EntityFileNameParameter> EntityFileNameParameter { get; set; }
        public virtual DbSet<ERPType> ERPType { get; set; }
        public virtual DbSet<FieldType> FieldType { get; set; }
        public virtual DbSet<FieldValue> FieldValue { get; set; }
        public virtual DbSet<IntegrationKey> IntegrationKey { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<JobSchedule> JobSchedule { get; set; }
        public virtual DbSet<JobType> JobType { get; set; }
        public virtual DbSet<MappingTemplate> MappingTemplate { get; set; }
        public virtual DbSet<MappingTypeTemplate> MappingTypeTemplate { get; set; }
        public virtual DbSet<Organization> Organization { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Store> Store { get; set; }
        public virtual DbSet<Subscriber> Subscriber { get; set; }
        public virtual DbSet<WorkFlow> WorkFlow { get; set; }
        public virtual DbSet<WorkFlowState> WorkFlowState { get; set; }
        public virtual DbSet<WorkFlowTransition> WorkFlowTransition { get; set; }
        public virtual DbSet<DataDirection> DataDirection { get; set; }
        public virtual DbSet<ActionRequest> ActionRequest { get; set; }
        public virtual DbSet<JobLogStatus> JobLogStatus { get; set; }
        public virtual DbSet<JobLog> JobLog { get; set; }
        public virtual DbSet<Archive_RequestResponse> Archive_RequestResponse { get; set; }
        public virtual DbSet<PaymentConnector> PaymentConnector { get; set; }
        public virtual DbSet<LogMapper> LogMapper { get; set; }
        public virtual DbSet<CountryNames> CountryNames { get; set; }
        public virtual DbSet<DataDelete> DataDelete { get; set; }
        public virtual DbSet<CatalogLogs> CatalogLogs { get; set; }
        public virtual DbSet<ThirdPartyEnvironmentWithStatus> ThirdPartyEnvironmentWithStatus { get; set; }
        public virtual DbSet<AosUrlSetting> AosUrlSetting { get; set; }
        public virtual DbSet<ServiceBusRequestLog> ServiceBusRequestLog { get; set; }
        public virtual DbSet<MandatoryStateCountry> MandatoryStateCountry { get; set; }
        public virtual DbSet<SingleCatalogProductStaging> SingleCatalogProductStaging { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<CountryCode> CountryCode { get; set; }
        public virtual DbSet<RequestResponse> RequestResponse { get; set; }
        public virtual DbSet<ThirdPartyMessage> ThirdPartyMessage { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> spDataDelete(Nullable<long> dataDeleteId, string requestId, string customerAccountNumber, string contactPersonEmail)
        {
            var dataDeleteIdParameter = dataDeleteId.HasValue ?
                new ObjectParameter("DataDeleteId", dataDeleteId) :
                new ObjectParameter("DataDeleteId", typeof(long));
    
            var requestIdParameter = requestId != null ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(string));
    
            var customerAccountNumberParameter = customerAccountNumber != null ?
                new ObjectParameter("CustomerAccountNumber", customerAccountNumber) :
                new ObjectParameter("CustomerAccountNumber", typeof(string));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDataDelete", dataDeleteIdParameter, requestIdParameter, customerAccountNumberParameter, contactPersonEmailParameter);
        }
    }
}
